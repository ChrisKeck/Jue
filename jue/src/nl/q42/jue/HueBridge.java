package nl.q42.jue;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.List;

import nl.q42.jue.Networker.Result;
import nl.q42.jue.exceptions.ApiException;
import nl.q42.jue.exceptions.LinkButtonException;
import nl.q42.jue.exceptions.UnauthorizedException;
import nl.q42.jue.models.ResponseString;
import nl.q42.jue.models.CreateUserRequest;
import nl.q42.jue.models.ResponseMap;
import nl.q42.jue.models.ErrorResponse;
import nl.q42.jue.models.Config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

/**
 * Representation of a connection with a Hue bridge.
 */
public class HueBridge {
	private final static String DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss";
	
	private String ip;
	private String username;
	
	private Gson gson = new GsonBuilder().setDateFormat(DATE_FORMAT).create();
	
	private Type responseTypeMap = new TypeToken<List<ResponseMap>>(){}.getType();
	private Type responseTypeString = new TypeToken<List<ResponseString>>(){}.getType();
	
	/**
	 * Connect with a bridge as a new user.
	 * @param ip IP address of bridge
	 */
	public HueBridge(String ip) {
		this.ip = ip;
	}
	
	/**
	 * Connect with a bridge as an existing user.
	 * @param ip IP address of bridge
	 * @param username Username to authenticate with
	 */
	public HueBridge(String ip, String username) {
		this.ip = ip;
		this.username = username;
	}
	
	/**
	 * Returns the username currently authenticated with or null if there isn't one.
	 * @return Username or null
	 */
	public String getUsername() {
		return username;
	}
	
	/**
	 * Returns basic configuration of the bridge (name and firmware version).
	 * No authentication is required, but more information is available if authenticated.
	 * @see Config
	 * @return Simple configuration info
	 */
	public Config getConfig() throws IOException {
		Result result;
		
		if (username == null) {
			result = Networker.get(getRelativeURL("config"));
		} else {
			result = Networker.get(getRelativeURL(username + "/config"));
		}
		
		if (result.getResponseCode() == 200) {
			return gson.fromJson(result.getBody(), Config.class);
		} else {
			throw new IOException();
		}
	}
	
	/**
	 * Link with bridge using the specified username and device type.
	 * @param username Username for new user (between 10 and 40 characters)
	 * @param devicetype Identifier of application (maximum length of 40 characters)
	 * @throws ApiException Throws LinkButtonException if the bridge button has not been pressed, ApiException for other errors
	 */
	public void link(String username, String devicetype) throws IOException, ApiException {
		this.username = link(new CreateUserRequest(username, devicetype));
	}
	
	/**
	 * Link with bridge using the specified device type. A random valid username will be generated by the bridge and returned.
	 * @return New random username generated by bridge
	 * @param devicetype Identifier of application (maximum length of 40 characters)
	 * @throws ApiException Throws LinkButtonException if the bridge button has not been pressed, ApiException for other errors
	 */
	public String link(String devicetype) throws IOException, ApiException {
		return (this.username = link(new CreateUserRequest(devicetype)));
	}
	
	private String link(CreateUserRequest request) throws IOException, ApiException {
		if (this.username != null) {
			throw new IllegalStateException("already linked");
		}
		
		String body = gson.toJson(request, CreateUserRequest.class);
		Result result = Networker.post(getRelativeURL(""), body);
		
		if (result.getResponseCode() == 200) {
			List<ResponseMap> entries = gson.fromJson(result.getBody(), responseTypeMap);
			ResponseMap response = entries.get(0);
			
			handleErrors(response.error);
			
			return response.success.get("username");
		} else {
			throw new IOException();
		}
	}
	
	/**
	 * Unlink the current user from the bridge.
	 * @throws ApiException Throws UnauthorizedException if the user no longer exists, ApiException for other errors
	 */
	public void unlink() throws IOException, ApiException {
		if (this.username == null) {
			throw new IllegalStateException("link before unlinking");
		}
		
		Result result = Networker.delete(getRelativeURL(username + "/config/whitelist/" + username));
		
		if (result.getResponseCode() == 200) {
			List<ResponseString> entries = gson.fromJson(result.getBody(), responseTypeString);
			ResponseString response = entries.get(0);
			
			handleErrors(response.error);
		} else {
			throw new IOException();
		}
	}
	
	private void handleErrors(ErrorResponse error) throws ApiException {
		if (error != null) {
			switch (error.type) {
			case 1:
				throw new UnauthorizedException(error.description);
			case 101:
				throw new LinkButtonException(error.description);
			default:
				throw new ApiException(error.description);
			}
		}
	}
	
	private String getRelativeURL(String path) {
		return "http://" + ip + "/api/" + path;
	}
}
